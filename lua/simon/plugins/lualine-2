-- local icon = require("simon.icons")
-- local mode = "mode"
-- local filetype = { "filetype", icon_only = true }


-- local colors = require("catppuccin.palettes").get_palette "macchiato"
-- local colors = require('rose-pine').colorscheme()

local colors = {
  _experimental_nc = '#1f1d30',
  base = '#232136',
  surface = '#2a273f',
  overlay = '#393552',
  muted = '#6e6a86',
  subtle = '#908caa',
  text = '#e0def4',
  love = '#eb6f92',

  gold = '#f6c177',
  rose = '#ea9a97',
  pine = '#3e8fb0',
  foam = '#9ccfd8',
  iris = '#c4a7e7',
  highlight_low = '#2a283e',
  highlight_med = '#44415a',
  highlight_high = '#56526e',
  none = 'NONE',
}



local modecolor = {
  n = colors.gold,
  i = colors.rose,
  v = colors.iris,
  [""] = colors.iris,
  V = colors.pine,
  c = colors.pine,
  no = colors.bg_dark,
  s = colors.bg_dark,
  S = colors.rose,
  [""] = colors.rose,
  ic = colors.rose,
  R = colors.foam,
  Rv = colors.iris,
  cv = colors.love,
  ce = colors.love,
  r = colors.foam,
  rm = colors.foam,
  ["r?"] = colors.foam,
  ["!"] = colors.love,
  t = colors.love,
}

local theme = {
  normal = {
    a = { fg = colors.text, bg = colors.pine },
    b = { fg = colors.text, bg = colors.pine },
    c = { fg = colors.text, bg = colors.bg_dark },
    z = { fg = colors.text, bg = colors.bg_dark },
  },
  insert = { a = { fg = colors.text, bg = colors.love } },
  visual = { a = { fg = colors.text, bg = colors.pine } },
  replace = { a = { fg = colors.text, bg = colors.base } },
}

local space = {
  function()
    return " "
  end,
  color = { bg = colors.bg_dark, fg = colors.pine },
}

local filename = {
  "filename",
  color = { bg = colors.pine, fg = colors.text, gui = "bold" },
  separator = { left = "", right = "" },
}

local filetype = {
  "filetype",
  icons_enabled = false,
  color = { bg = colors.pine, fg = colors.pine, gui = "italic,bold" },
  separator = { left = "", right = "" },
}

local branch = {
  "branch",
  icon = "",
  color = { bg = colors.foam, fg = colors.text, gui = "bold" },
  separator = { left = "", right = "" },
}

local location = {
  "location",
  color = { bg = colors.rose, fg = colors.gold, gui = "bold" },
  separator = { left = "", right = "" },
}

local diff = {
  "diff",
  color = { bg = colors.base, fg = colors.rose, gui = "bold" },
  separator = { left = "", right = "" },
  symbols = { added = " ", modified = " ", removed = " " },

  diff_color = {
    added = { fg = colors.foam },
    modified = { fg = colors.rose },
    removed = { fg = colors.bright_love },
  },
}

local modes = {
  "mode",
  color = function()
    local mode_color = modecolor
    return { bg = mode_color[vim.fn.mode()], fg = colors.text, gui = "bold" }
  end,
  separator = { left = "", right = "" },
}

local function getLspName()
  local buf_clients = vim.lsp.buf_get_clients()
  local buf_ft = vim.bo.filetype
  if next(buf_clients) == nil then
    return "  No servers"
  end
  local buf_client_names = {}

  for _, client in pairs(buf_clients) do
    if client.name ~= "null-ls" then
      table.insert(buf_client_names, client.name)
    end
  end

  local lint_s, lint = pcall(require, "lint")
  if lint_s then
    for ft_k, ft_v in pairs(lint.linters_by_ft) do
      if type(ft_v) == "table" then
        for _, linter in ipairs(ft_v) do
          if buf_ft == ft_k then
            table.insert(buf_client_names, linter)
          end
        end
      elseif type(ft_v) == "string" then
        if buf_ft == ft_k then
          table.insert(buf_client_names, ft_v)
        end
      end
    end
  end

  local ok, conform = pcall(require, "conform")
  local formatters = table.concat(conform.list_formatters_for_buffer(), " ")
  if ok then
    for formatter in formatters:gmatch("%w+") do
      if formatter then
        table.insert(buf_client_names, formatter)
      end
    end
  end

  local hash = {}
  local unique_client_names = {}

  for _, v in ipairs(buf_client_names) do
    if not hash[v] then
      unique_client_names[#unique_client_names + 1] = v
      hash[v] = true
    end
  end
  local language_servers = table.concat(unique_client_names, ", ")

  return "  " .. language_servers
end

-- local macro = {
--   require("noice").api.status.mode.get,
--   cond = require("noice").api.status.mode.has,
--   color = { fg = colors.love, bg = colors.bg_dark, gui = "italic,bold" },
-- }

local dia = {
  "diagnostics",
  sources = { "nvim_diagnostic" },
  symbols = { error = " ", warn = " ", info = " ", hint = " " },
  diagnostics_color = {
    error = { fg = colors.love },
    warn = { fg = colors.gold },
    info = { fg = colors.iris },
    hint = { fg = colors.gray2 },
  },
  color = { bg = colors.gray2, fg = colors.pine, gui = "bold" },
  separator = { left = "" },
}

local lsp = {
  function()
    return getLspName()
  end,
  separator = { left = "", right = "" },
  color = { bg = colors.iris, fg = colors.bg, gui = "italic,bold" },
}
return {
  -- Set lualine as statusline
  'nvim-lualine/lualine.nvim',
  -- See `:help lualine.txt`
  depends = {
    -- oldworld
    "dgox16/oldworld.nvim",
  },
  opts = {
    options = {
      icons_enabled = true,
      theme = theme,
      component_separators = { left = "", right = "" },
      section_separators = { left = "", right = "" },
      disabled_filetypes = {
        statusline = {},
        winbar = {},
      },
      ignore_focus = {},
      always_divide_middle = true,
      globalstatus = true,
    },

    sections = {


      lualine_a = {
        modes,
      },
    },
    --   lualine_b = {
    --     space,
    --   },
    --   lualine_c = {
    --     filename,
    --     branch,
    --     diff,
    --     location,
    --   },
    --   lualine_x = {
    --     space,
    --   },
    --   lualine_y = { space },
    --   lualine_z = {
    --     dia,
    --     lsp,
    --   },
    -- },
    inactive_sections = {
      lualine_a = {},
      lualine_b = {},
      lualine_c = { "filename" },
      lualine_x = { "location" },
      lualine_y = {},
      lualine_z = {},
    },
  },
}
